name: Update Projects Data

on:
  repository_dispatch:
    types: [update-projects-data]
  workflow_dispatch:
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  update-projects-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Fetch latest projects data from API
        id: fetch-data
        run: |
          echo "Fetching projects data from API..."
          
          response=$(curl -s -w "%{http_code}" -o projectsData.json --max-time 30 https://afaw-beta-api.onrender.com/api/projects)
          http_code="${response: -3}"
          
          if [ "$http_code" != "200" ]; then
            echo "❌ API request failed with status code: $http_code"
            exit 1
          fi
          
          if ! jq empty projectsData.json 2>/dev/null; then
            echo "❌ Invalid JSON response from API"
            exit 1
          fi
          
          array_length=$(jq length projectsData.json)
          if [ "$array_length" -eq 0 ]; then
            echo "❌ API returned empty projects data"
            exit 1
          fi
          
          echo "✅ Successfully fetched $array_length projects"
          echo "data_count=$array_length" >> $GITHUB_OUTPUT

      - name: Convert JSON to JS export
        run: |
          echo "Converting JSON to JavaScript module..."
          
          cat > src/data/projectsData.js << EOF
          // Auto-generated from API - Do not edit manually
          // Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          export const projects = 
          EOF
          
          jq '.' projectsData.json >> src/data/projectsData.js
          echo ";" >> src/data/projectsData.js
          
          echo "✅ JavaScript file generated successfully"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet src/data/projectsData.js; then
            echo "No changes detected in projects data"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in projects data"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🤖 Update projects data from API"
          title: "🤖 Auto-update projects data"
          body: |
            ## 🤖 Automated Projects Data Update
            
            This PR updates the projects data from the API.
            
            **Changes:**
            - Updated project information
            - Data fetched from: https://afaw-beta-api.onrender.com/api/projects
            - Projects count: ${{ steps.fetch-data.outputs.data_count }}
            
            **Generated:** ${{ github.event_name == 'workflow_dispatch' && 'Manual trigger' || 'Scheduled update' }}
            
            ---
            *This PR was automatically generated by GitHub Actions*
          branch: update-projects-data-${{ github.run_id }}
          delete-branch: true

      - name: Comment on PR
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `update-projects-data-${context.runId}`
            });
            
            if (pulls.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pulls[0].number,
                body: `✅ Projects data has been updated successfully!\n\n**Summary:**\n- Projects: ${{ steps.fetch-data.outputs.data_count }}\n- Last API fetch: ${new Date().toISOString()}`
              });
            }

      - name: Success message
        if: steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "✅ No changes needed - projects data is up to date"
